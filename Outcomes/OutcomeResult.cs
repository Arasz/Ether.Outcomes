using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ether.Outcomes
{
    /// <summary>
    /// OutcomeResult is a generic wrapper. It allows you to wrap your method responses in metadata, eliminating plumbing code.
    /// OutcomeResults are generated by calling Outcomes.Success() or Outcomes.Failure()
    /// </summary>
    /// <typeparam name="T">The type that this OutcomeResult wraps.</typeparam>
    public class OutcomeResult<T> : IOutcome<T>
    {
        public bool Success { get; protected set; }
        public List<string> Messages { get; protected set; }
        public T Value { get; set; }

        internal OutcomeResult(bool success)
        {
            Success = success;
            Messages = new List<string>();
            Value = default(T);
        }

        /// <returns>The message list, concatenated.</returns>
        public override string ToString()
        {
            return FormatMultiLine(string.Empty);
        }

        /// <summary>
        /// Dumps the message list into a string, with a delimiter after each line. 
        /// </summary>
        /// <param name="delimiter">A delimiter that goes after each string in the message list. Useful for implementing platform-appropriate line breaks.</param>
        /// <returns>The message list, concatenated.</returns>
        [Obsolete("This will be removed in v2, as this is an unconventional use for ToString. Use FormatMultiLine instead.")]
        public string ToString(string delimiter)
        {
            return FormatMultiLine(delimiter);
        }

        /// <summary>
        /// Dumps the message list into a string, with a delimiter after each line. 
        /// </summary>
        /// <param name="delimiter">A delimiter that goes after each string in the message list. Useful for implementing platform-appropriate line breaks.</param>
        /// <returns>The message list, concatenated.</returns>       
        public string FormatMultiLine(string delimiter = null)
        {
            if (delimiter == null)
                delimiter = string.Empty;

            var result = new StringBuilder();

            foreach (var message in Messages)
                result.AppendFormat("{0}{1}", message, delimiter);

            return result.ToString();
        }
    }
}
